{"version":3,"file":"utils.esm.js","sources":["../../../../src/components/legend/components/legend-item-types/utils.js"],"sourcesContent":["/**\n * CODE COPIED FROM:\n * https://github.com/Vizzuality/layer-manager/blob/v1.13.2/src/utils/query.js\n *\n * By including the content of the file here, we can remove the layer-manager v1 as a dependency\n */\n\nimport compact from 'lodash/compact';\n\n/**\n * Params should have this format => { key:'xxx', key2:'xxx' }\n * Keys to search should be in this format {{key}}\n * @param {String} originalStr\n * @param {Object} params\n */\nexport const substitution = (originalStr, params = {}) => {\n  let str = originalStr;\n  Object.keys(params).forEach((key) => {\n    str = str\n      .replace(new RegExp(`{{${key}}}`, 'g'), params[key])\n      .replace(new RegExp(`{${key}}`, 'g'), params[key]);\n  });\n  return str;\n};\n\n/**\n * Params should have this format => { where1: { { key:'xxx', key2:'xxx' } }},\n * Keys to search should be in this format {{key}}\n * @param {String} originalStr\n * @param {Object} params\n */\nexport const concatenation = (originalStr, params = {}) => {\n  let str = originalStr;\n  let sql;\n\n  Object.keys(params).forEach((key) => {\n    sql = `${compact(\n      Object.keys(params[key]).map((k) => {\n        const value = params[key][k];\n\n        if (Array.isArray(value) && !!value.length) {\n          // window.isNaN is needed here as Number.isNaN returns\n          // false in the case Number.isNaN('string'). please dont change.\n          const mappedValue = value.map((v) => (Number.isNaN(v) ? `'${v}'` : v));\n          // eslint-disable-line\n          return `${k} IN (${mappedValue.join(', ')})`;\n        }\n\n        if (value) {\n          return Number.isNaN(value) ? `${k} = '${value}'` : `${k} = ${value}`; // eslint-disable-line\n        }\n\n        return null;\n      })\n    ).join(' AND ')}`;\n\n    if (sql && key.startsWith('where')) sql = `WHERE ${sql}`;\n    else if (sql && key.startsWith('and')) sql = `AND ${sql}`;\n    else sql = '';\n\n    str = str.replace(new RegExp(`{{${key}}}`, 'g'), sql);\n    str = str.replace(new RegExp(`{${key}}`, 'g'), sql);\n  });\n\n  return str;\n};\n\n/**\n * Replace function\n * @param {String} string\n * @param {Object} params\n * @param {Object} sqlParams\n */\nexport const replace = (originalStr, params = {}, sqlParams = {}) => {\n  let str = originalStr;\n\n  if (typeof str === 'string') {\n    str = substitution(str, params);\n    str = concatenation(str, sqlParams);\n  }\n\n  return str;\n};\n\nexport default { substitution, concatenation, replace };\n"],"names":["substitution","originalStr","params","str","Object","keys","forEach","key","replace","RegExp","concatenation","sql","compact","map","k","value","Array","isArray","length","mappedValue","v","Number","isNaN","join","startsWith","sqlParams"],"mappings":"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"}